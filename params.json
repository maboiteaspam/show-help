{"name":"Show-help","tagline":"node module helpers to display help section given command line arguments","body":"# show-help\r\n\r\nnode module helpers to display help section given command line arguments\r\n\r\n## Install\r\n\r\n    npm i maboiteaspam/show-help --save\r\n\r\n## Usage\r\n\r\n```js\r\nfunction usage () {/*\r\n...some text...\r\n*/}\r\nvar pkg = require('./package.json')\r\nrequire('show-help')(usage, process.argv, pkg)\r\n```\r\n## Usage\r\n\r\n#### process.argv\r\n\r\nUsing the node `process.argv` value\r\n\r\n```js\r\nfunction usage () {/*\r\nmodule name\r\n        ...\r\n\r\n    Usage\r\n        ...\r\n\r\n    Options\r\n        ...\r\n\r\n    Examples\r\n        ...\r\n*/}\r\nvar pkg = require('./package.json')\r\nrequire('show-help')(usage, process.argv, pkg)\r\n//require('show-help').tpl('%name %version\\n\\t%description\\n\\n%usage')(usage, process.argv, pkg)\r\n\r\n```\r\n\r\nWhich then, can be invoked in such fashion\r\n```sh\r\nmodule-name -h\r\nmodule-name --help\r\n```\r\n\r\n#### minimist\r\n\r\nUsing `minimist` module to pre parse values\r\n\r\n```js\r\nfunction usage () {/*\r\nmodule name\r\n        ...\r\n\r\n    Usage\r\n        ...\r\n\r\n    Options\r\n        ...\r\n\r\n    Examples\r\n        ...\r\n*/}\r\nvar pkg  = require('./package.json')\r\nvar argv = require('minimist')(process.argv.slice(2));\r\nrequire('show-help').tpl('%name %version\\n\\t%description\\n\\n%usage')(usage, argv.h||argv.help, pkg)\r\n//require('show-help')(usage, argv.h||argv.help, pkg)\r\n```\r\n\r\nWhich then, can be invoked in such fashion\r\n```sh\r\nmodule-name -h\r\nmodule-name --help\r\n```\r\n\r\n## Api\r\n\r\n#### showHelp\r\n\r\n`showHelp` is a `function` to display help and exits when needed,\r\n\r\n- __showHelp(callable fn, object arg, object pkg, int code) void__\r\n\r\nWhen `typeof(arg)` is object, detect `(-h|--help)`,\r\nand figures out if `usage` should be displayed and program killed.\r\n\r\n`pkg` is object of `package.json` file.\r\n\r\n- __showHelp(callable fn, string arg, object pkg, int code) void__\r\n\r\nWhen `typeof(arg)` is string, and not `falsy`,\r\nit displays `usage` and kills the program with `code`.\r\n\r\n`pkg` is object of `package.json` file.\r\n\r\n- __showHelp(callable fn, bool arg, object pkg, int code) void__\r\n\r\nWhen `typeof(arg)` is bool, and not `falsy`,\r\nit displays `usage` and kills the program with `code`.\r\n\r\n`pkg` is object of `package.json` file.\r\n\r\n#### showHelp.tpl\r\n\r\n`showHelp.tpl` is a function to set a template to render usage,\r\n\r\n- __showHelp(string newTpl) showHelp__\r\n\r\nset `tpl` to `newTpl`, then returns `showHelp` for chaining.\r\n\r\n#### showHelp.raw\r\n\r\n`showHelp.raw` is a function to parse a string\r\nas a command line input. It detects `-h|--help` and invoke `showHelp.parsed`.\r\n\r\n- __showHelp.raw(callable fn, object pkg, string arg) bool__\r\n\r\nWhen `arg.match(/-h|--help/)` is not `falsy`, it renders and displays `usage`.\r\n\r\n#### showHelp.parsed\r\n\r\n`showHelp.parsed` is a function to invoke `showHelp.print` when `arg` is not `falsy`.\r\n\r\n- __showHelp.parsed(callable fn, object pkg, string arg) bool__\r\n\r\nWhen `arg` is not `falsy`, it renders and displays `usage`.\r\n\r\n#### showHelp.print\r\n\r\n`showHelp.print` is a function to render `template`\r\ngiven `multilen(fn)` usage string and `pkg` object,\r\nthen print it on `console.error`.\r\n\r\n- __showHelp.print(callable fn, object pkg) bool__\r\n\r\nRenders `usage` then print it on `console.error`.\r\n\r\n## More\r\n\r\n- https://github.com/sindresorhus/multiline\r\n- https://nodejs.org/api/process.html#process_process_argv\r\n- https://github.com/maboiteaspam/npi\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}